<?xml version="1.0" encoding="UTF-8"?>
<project name="antMain" default="dex_jar">

    <property file="local.properties" />
    <property file="ant.properties" />
    <property environment="env" />
    <!--<loadproperties srcFile="project.properties" />-->
    <import file="custom_rules.xml" optional="true" />
    <import file="${sdk.dir}/tools/ant/build.xml" />

    <!-- 引入Android依赖 -->
    <property name="lib.android" value="${sdk.dir}\platforms\android-20\android.jar"/>
    <!-- 引入混淆依赖 -->
    <property name="lib.proguard" value="${sdk.dir}\tools\proguard\lib\proguard.jar" />
    <!-- 引入lib依赖 -->
    <!--<property name="lib.selflib" value="E:\java\workspace\base\bin\base.jar"/>-->
    <!-- 混淆命令(当前系统为windows，如果系统为linux，可将.bat文件替换成相对应的命令) -->
    <property name="dx" value="${sdk.dir}\build-tools\android-4.4W\dx.bat" />

    <!-- 声明依赖的jar -->
    <path id="dependencies">
        <fileset dir="${basedir}/libs">
            <include name="*.jar" />
        </fileset>
        <fileset dir="${sdk.dir}\tools\support">
            <include name="*.jar" />
        </fileset>
    </path>


    <!-- 拆分java文件（通过拷贝命令） -->
    <target name="separate_java">
        <!-- diyJavaFilePath自定义java文件存放的文件路径 -->

        <delete dir="${diyJavaFilePath}" />
        <mkdir dir="${diyJavaFilePath}" />
        <copy todir="${diyJavaFilePath}">
            <fileset dir="${basedir}/src/main/java">
                <include name="com/**/*.java" />
                <exclude name="com/**/MainActivityBuoy.java" />
            </fileset>
        </copy>
    </target>

    <!-- 编译java文件（生成class文件） -->
    <target name="compile_java" depends="separate_java">
        <!-- diyClassFilePath自定义class文件存放的文件路径 -->
        <delete dir="${diyClassFilePath}" />
        <mkdir dir="${diyClassFilePath}" />

        <javac encoding="UTF-8" target="1.8" debug="false" extdirs=""
               srcdir="${diyJavaFilePath}"
               destdir="${diyClassFilePath}"
               includeAntRuntime = "false"
               bootclasspath="${lib.android}">
            <classpath refid="dependencies" />
        </javac>

    </target>

    <!-- 混淆class文件 -->
    <target name="optimize_class" depends="compile_java">
        <!-- diyClsJarFile自定义原始JAR文件名 -->
        <delete file="${diyClsJarFile}"/>

        <jar destfile="${diyClsJarFile}">
            <fileset dir="${diyClassFilePath}" includes="**/*.class"/>
        </jar>

        <!-- diyOptJarFile自定义混淆JAR文件名 -->
        <delete file="${diyOptJarFile}"/>

        <java jar="${lib.proguard}" fork="true" failonerror="true">
            <jvmarg value="-Dmaximum.inlined.code.length=32"/>
            <arg value="-injars ${diyClsJarFile}"/>
            <arg value="-outjars ${diyOptJarFile}"/>
            <arg value="-libraryjars ${lib.android}"/>
            <arg value="-dontpreverify"/>
            <arg value="-dontoptimize"/>
            <arg value="-dontusemixedcaseclassnames"/>
            <arg value="-allowaccessmodification"/>
            <arg value="-optimizationpasses 5"/>
            <arg value="-verbose"/>
            <arg value="-dontskipnonpubliclibraryclasses"/>
            <arg value="-dontskipnonpubliclibraryclassmembers"/>

            <!-- 在这里添加混淆配置 -->
            <!--<arg value="-keepattributes Exceptions,*Annotation*,EnclosingMethod"/>-->
            <!--<arg value="-keep public class com.**.*{public <fields>;<methods>;}"/>-->
        </java>

    </target>

    <!-- DEX-JAR文件 -->
    <target name="dex_jar" depends="optimize_class">
        <!-- 自定义dex文件路径 -->
        <delete file="${diyDexFileFolder}/classes.dex"/>

        <exec executable="${dx}" failonerror="true">
            <arg value="--dex" />
            <arg value="--output=${diyDexFileFolder}/classes.dex" />
            <arg value="${diyOptJarFile}" />
            <arg value="${basedir}/libs" />
        </exec >

        <!-- 自定义将dex文件打成Jar包后的文件路径 -->
        <delete file="${diyReleaseFilePath}"/>

        <jar destfile="${diyReleaseFilePath}">
            <fileset dir="${basedir}/${diyDexFileFolder}">
                <include name="**/*.dex" />
            </fileset>
        </jar>
    </target>

    <!-- 执行命令（可选操作）：java -jar jarName args -->
  <!--  <target name="cmd_jar" depends="dex_jar">
        <java jar="${jarUtilName}" fork="true" failonerror="true">
            <jvmarg value="-Dmaximum.inlined.code.length=32"/>
            <arg value="${arg1}"/>
            <arg value="${arg2}"/>
            <arg value="${arg3}"/>
            &lt;!&ndash; arg4... &ndash;&gt;
        </java>
    </target>

    &lt;!&ndash; 合并文件（可选操作） &ndash;&gt;
    <target name="release" depends="dex_jar">
        <delete file="${file_release}"/>
        &lt;!&ndash;
        	举例将 ${diyFileA}与 ${diyFileBPath}/${diyFileBName}打到一起
        	最终目录结构：
        	${diyFileA}
        	assets/${diyFileBName}
        &ndash;&gt;
        <jar destfile="${file_release}">
            <zipfileset src="${diyFileA}"/>
            <zipfileset dir="${basedir}/${diyFileBPath}" prefix="assets">
                <include name="${diyFileBName}"/>
            </zipfileset>
        </jar>
    </target>-->
</project>
